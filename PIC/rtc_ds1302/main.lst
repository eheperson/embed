CCS PCM C Compiler, Version 5.007, 61971               27-Dec-18 13:11

               Filename:   C:\Users\mrgunter\Documents\CCS C Projects\itsme\rtc_ds1302\main.lst

               ROM used:   1090 words (13%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           29 (8%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   335
0003:  NOP
.................... /****************************************************************** 
....................  PIC16F877 ile DS1621 Sýcaklýk ve Termostat Entegresi Uygulamasý 
.................... *******************************************************************/ 
.................... #include <16f877.h>     // Kullanýlacak denetleyicinin baþlýk                 // dosyasý tanýtýlýyor. 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 8A,29
000D:  DATA E1,30
000E:  DATA 74,1D
000F:  DATA 25,18
0010:  DATA 32,32
0011:  DATA BA,12
0012:  DATA 30,19
0013:  DATA 64,1D
0014:  DATA 25,18
0015:  DATA 32,32
0016:  DATA 00,00
*
0196:  MOVF   31,W
0197:  CLRF   78
0198:  SUBWF  30,W
0199:  BTFSC  03.0
019A:  GOTO   19E
019B:  MOVF   30,W
019C:  MOVWF  77
019D:  GOTO   1AA
019E:  CLRF   77
019F:  MOVLW  08
01A0:  MOVWF  32
01A1:  RLF    30,F
01A2:  RLF    77,F
01A3:  MOVF   31,W
01A4:  SUBWF  77,W
01A5:  BTFSC  03.0
01A6:  MOVWF  77
01A7:  RLF    78,F
01A8:  DECFSZ 32,F
01A9:  GOTO   1A1
01AA:  RETURN
01AB:  CLRF   77
01AC:  CLRF   78
01AD:  MOVF   30,W
01AE:  BCF    03.0
01AF:  BTFSC  31.0
01B0:  ADDWF  77,F
01B1:  RRF    77,F
01B2:  RRF    78,F
01B3:  BTFSC  31.1
01B4:  ADDWF  77,F
01B5:  RRF    77,F
01B6:  RRF    78,F
01B7:  BTFSC  31.2
01B8:  ADDWF  77,F
01B9:  RRF    77,F
01BA:  RRF    78,F
01BB:  BTFSC  31.3
01BC:  ADDWF  77,F
01BD:  RRF    77,F
01BE:  RRF    78,F
01BF:  BTFSC  31.4
01C0:  ADDWF  77,F
01C1:  RRF    77,F
01C2:  RRF    78,F
01C3:  BTFSC  31.5
01C4:  ADDWF  77,F
01C5:  RRF    77,F
01C6:  RRF    78,F
01C7:  BTFSC  31.6
01C8:  ADDWF  77,F
01C9:  RRF    77,F
01CA:  RRF    78,F
01CB:  BTFSC  31.7
01CC:  ADDWF  77,F
01CD:  RRF    77,F
01CE:  RRF    78,F
01CF:  RETURN
*
0288:  MOVLW  20
0289:  BTFSS  28.4
028A:  MOVLW  30
028B:  MOVWF  29
028C:  MOVF   27,W
028D:  MOVWF  77
028E:  BTFSS  27.7
028F:  GOTO   298
0290:  COMF   77,F
0291:  INCF   77,F
0292:  MOVF   77,W
0293:  MOVWF  27
0294:  MOVLW  2D
0295:  MOVWF  29
0296:  BSF    28.7
0297:  BSF    28.0
0298:  MOVF   27,W
0299:  MOVWF  30
029A:  MOVLW  64
029B:  MOVWF  31
029C:  CALL   196
029D:  MOVF   77,W
029E:  MOVWF  27
029F:  MOVLW  30
02A0:  ADDWF  78,W
02A1:  MOVWF  2A
02A2:  MOVF   27,W
02A3:  MOVWF  30
02A4:  MOVLW  0A
02A5:  MOVWF  31
02A6:  CALL   196
02A7:  MOVLW  30
02A8:  ADDWF  77,W
02A9:  MOVWF  2C
02AA:  MOVLW  30
02AB:  ADDWF  78,W
02AC:  MOVWF  2B
02AD:  MOVF   29,W
02AE:  MOVWF  77
02AF:  MOVLW  30
02B0:  SUBWF  2A,W
02B1:  BTFSC  03.2
02B2:  GOTO   2B7
02B3:  BSF    28.1
02B4:  BTFSC  28.7
02B5:  BSF    28.2
02B6:  GOTO   2CB
02B7:  BTFSC  28.2
02B8:  GOTO   2CB
02B9:  MOVF   29,W
02BA:  MOVWF  2A
02BB:  BTFSC  28.1
02BC:  GOTO   2C2
02BD:  MOVLW  30
02BE:  SUBWF  2B,W
02BF:  BTFSC  03.2
02C0:  GOTO   2C5
02C1:  BSF    28.0
02C2:  BTFSC  28.7
02C3:  BSF    28.1
02C4:  GOTO   2CB
02C5:  BTFSS  03.2
02C6:  BSF    28.0
02C7:  BTFSS  03.2
02C8:  GOTO   2CB
02C9:  MOVF   2A,W
02CA:  MOVWF  2B
02CB:  BTFSC  28.2
02CC:  GOTO   2D2
02CD:  BTFSC  28.1
02CE:  GOTO   2D5
02CF:  BTFSC  28.0
02D0:  GOTO   2D8
02D1:  GOTO   2DB
02D2:  MOVF   29,W
02D3:  MOVWF  2D
02D4:  CALL   25C
02D5:  MOVF   2A,W
02D6:  MOVWF  2D
02D7:  CALL   25C
02D8:  MOVF   2B,W
02D9:  MOVWF  2D
02DA:  CALL   25C
02DB:  MOVF   2C,W
02DC:  MOVWF  2D
02DD:  CALL   25C
02DE:  RETURN
02DF:  MOVF   0B,W
02E0:  MOVWF  28
02E1:  BCF    0B.7
02E2:  BSF    03.5
02E3:  BSF    03.6
02E4:  BSF    0C.7
02E5:  BSF    0C.0
02E6:  NOP
02E7:  NOP
02E8:  BTFSC  03.0
02E9:  GOTO   311
02EA:  BCF    03.5
02EB:  MOVF   0C,W
02EC:  ANDLW  7F
02ED:  BCF    03.6
02EE:  MOVWF  29
02EF:  BSF    03.6
02F0:  MOVF   0D,W
02F1:  BCF    03.6
02F2:  MOVWF  2A
02F3:  BSF    03.6
02F4:  MOVF   0F,W
02F5:  BCF    03.6
02F6:  MOVWF  2B
02F7:  MOVF   29,W
02F8:  MOVWF  2D
02F9:  CALL   25C
02FA:  MOVF   2A,W
02FB:  BSF    03.6
02FC:  MOVWF  0D
02FD:  BCF    03.6
02FE:  MOVF   2B,W
02FF:  BSF    03.6
0300:  MOVWF  0F
0301:  BSF    03.5
0302:  BSF    0C.7
0303:  BSF    0C.0
0304:  NOP
0305:  NOP
0306:  BCF    03.5
0307:  BCF    03.6
0308:  DECFSZ 27,F
0309:  GOTO   30B
030A:  GOTO   30E
030B:  BSF    03.5
030C:  BSF    03.6
030D:  GOTO   311
030E:  GOTO   330
030F:  BSF    03.5
0310:  BSF    03.6
0311:  BCF    03.5
0312:  RLF    0C,W
0313:  RLF    0E,W
0314:  ANDLW  7F
0315:  BCF    03.6
0316:  MOVWF  29
0317:  BSF    03.6
0318:  MOVF   0D,W
0319:  BCF    03.6
031A:  MOVWF  2A
031B:  BSF    03.6
031C:  MOVF   0F,W
031D:  BCF    03.6
031E:  MOVWF  2B
031F:  MOVF   29,W
0320:  MOVWF  2D
0321:  CALL   25C
0322:  MOVF   2A,W
0323:  BSF    03.6
0324:  MOVWF  0D
0325:  BCF    03.6
0326:  MOVF   2B,W
0327:  BSF    03.6
0328:  MOVWF  0F
0329:  INCF   0D,F
032A:  BTFSC  03.2
032B:  INCF   0F,F
032C:  BCF    03.0
032D:  BCF    03.6
032E:  DECFSZ 27,F
032F:  GOTO   2E2
0330:  BTFSC  28.7
0331:  BSF    0B.7
0332:  BCF    0A.3
0333:  BCF    0A.4
0334:  GOTO   419 (RETURN)
*
0437:  BCF    0A.0
0438:  BCF    0A.1
0439:  BSF    0A.2
043A:  ADDWF  02,F
043B:  GOTO   3CA
043C:  GOTO   3D4
043D:  GOTO   3DE
043E:  GOTO   3E8
043F:  GOTO   3F2
0440:  GOTO   3FC
0441:  GOTO   406
....................  
.................... #list 
....................  
.................... #fuses XT,NOWDT,NOPROTECT,NOBROWNOUT,NOLVP,NOPUT,NOWRT,NODEBUG,NOCPD // Denetleyici konfigürasyon ayarlarý 
....................  
.................... #use delay (clock=4000000) // Gecikme fonksiyonu için kullanýlacak osilatör frekansý belirtiliyor. 
*
0017:  MOVLW  2E
0018:  MOVWF  04
0019:  BCF    03.7
001A:  MOVF   00,W
001B:  BTFSC  03.2
001C:  GOTO   02B
001D:  MOVLW  01
001E:  MOVWF  78
001F:  CLRF   77
0020:  DECFSZ 77,F
0021:  GOTO   020
0022:  DECFSZ 78,F
0023:  GOTO   01F
0024:  MOVLW  4A
0025:  MOVWF  77
0026:  DECFSZ 77,F
0027:  GOTO   026
0028:  GOTO   029
0029:  DECFSZ 00,F
002A:  GOTO   01D
002B:  RETURN
....................  
.................... #define LCD_RS_PIN PIN_D0 
.................... #define LCD_RW_PIN PIN_D1 
.................... #define LCD_ENABLE_PIN PIN_D2 
.................... #define LCD_DATA4 PIN_D3 
.................... #define LCD_DATA5 PIN_D4 
.................... #define LCD_DATA6 PIN_D5 
.................... #define LCD_DATA7 PIN_D6 
....................  
.................... //#define use_portb_lcd TRUE   // LCD B portuna baðlý 
.................... #include <lcd.c>     // LCD.c dosyasý programa ekleniyor 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0090:  BSF    08.3
....................    output_float(LCD_DATA5); 
0091:  BSF    08.4
....................    output_float(LCD_DATA6); 
0092:  BSF    08.5
....................    output_float(LCD_DATA7); 
0093:  BSF    08.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0094:  BCF    03.5
0095:  BSF    08.1
0096:  BSF    03.5
0097:  BCF    08.1
....................    delay_cycles(1); 
0098:  NOP
....................    lcd_output_enable(1); 
0099:  BCF    03.5
009A:  BSF    08.2
009B:  BSF    03.5
009C:  BCF    08.2
....................    delay_cycles(1); 
009D:  NOP
....................    high = lcd_read_nibble(); 
009E:  BCF    03.5
009F:  CALL   057
00A0:  MOVF   78,W
00A1:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
00A2:  BCF    08.2
00A3:  BSF    03.5
00A4:  BCF    08.2
....................    delay_cycles(1); 
00A5:  NOP
....................    lcd_output_enable(1); 
00A6:  BCF    03.5
00A7:  BSF    08.2
00A8:  BSF    03.5
00A9:  BCF    08.2
....................    delay_us(1); 
00AA:  NOP
....................    low = lcd_read_nibble(); 
00AB:  BCF    03.5
00AC:  CALL   057
00AD:  MOVF   78,W
00AE:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
00AF:  BCF    08.2
00B0:  BSF    03.5
00B1:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B2:  BCF    08.3
....................    output_drive(LCD_DATA5); 
00B3:  BCF    08.4
....................    output_drive(LCD_DATA6); 
00B4:  BCF    08.5
....................    output_drive(LCD_DATA7); 
00B5:  BCF    08.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B6:  BCF    03.5
00B7:  SWAPF  35,W
00B8:  MOVWF  77
00B9:  MOVLW  F0
00BA:  ANDWF  77,F
00BB:  MOVF   77,W
00BC:  IORWF  34,W
00BD:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0057:  CLRF   36
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0058:  BSF    03.5
0059:  BSF    08.3
005A:  MOVLW  00
005B:  BCF    03.5
005C:  BTFSC  08.3
005D:  MOVLW  01
005E:  IORWF  36,F
....................    n |= input(LCD_DATA5) << 1; 
005F:  BSF    03.5
0060:  BSF    08.4
0061:  MOVLW  00
0062:  BCF    03.5
0063:  BTFSC  08.4
0064:  MOVLW  01
0065:  MOVWF  77
0066:  BCF    03.0
0067:  RLF    77,F
0068:  MOVF   77,W
0069:  IORWF  36,F
....................    n |= input(LCD_DATA6) << 2; 
006A:  BSF    03.5
006B:  BSF    08.5
006C:  MOVLW  00
006D:  BCF    03.5
006E:  BTFSC  08.5
006F:  MOVLW  01
0070:  MOVWF  77
0071:  RLF    77,F
0072:  RLF    77,F
0073:  MOVLW  FC
0074:  ANDWF  77,F
0075:  MOVF   77,W
0076:  IORWF  36,F
....................    n |= input(LCD_DATA7) << 3; 
0077:  BSF    03.5
0078:  BSF    08.6
0079:  MOVLW  00
007A:  BCF    03.5
007B:  BTFSC  08.6
007C:  MOVLW  01
007D:  MOVWF  77
007E:  RLF    77,F
007F:  RLF    77,F
0080:  RLF    77,F
0081:  MOVLW  F8
0082:  ANDWF  77,F
0083:  MOVF   77,W
0084:  IORWF  36,F
....................     
....................    return(n); 
0085:  MOVF   36,W
0086:  MOVWF  78
....................   #else 
0087:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
002C:  BTFSC  35.0
002D:  GOTO   030
002E:  BCF    08.3
002F:  GOTO   031
0030:  BSF    08.3
0031:  BSF    03.5
0032:  BCF    08.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0033:  BCF    03.5
0034:  BTFSC  35.1
0035:  GOTO   038
0036:  BCF    08.4
0037:  GOTO   039
0038:  BSF    08.4
0039:  BSF    03.5
003A:  BCF    08.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
003B:  BCF    03.5
003C:  BTFSC  35.2
003D:  GOTO   040
003E:  BCF    08.5
003F:  GOTO   041
0040:  BSF    08.5
0041:  BSF    03.5
0042:  BCF    08.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0043:  BCF    03.5
0044:  BTFSC  35.3
0045:  GOTO   048
0046:  BCF    08.6
0047:  GOTO   049
0048:  BSF    08.6
0049:  BSF    03.5
004A:  BCF    08.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
004B:  NOP
....................    lcd_output_enable(1); 
004C:  BCF    03.5
004D:  BSF    08.2
004E:  BSF    03.5
004F:  BCF    08.2
....................    delay_us(2); 
0050:  GOTO   051
....................    lcd_output_enable(0); 
0051:  BCF    03.5
0052:  BCF    08.2
0053:  BSF    03.5
0054:  BCF    08.2
0055:  BCF    03.5
0056:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0088:  BSF    03.5
0089:  BCF    08.2
....................    lcd_rs_tris(); 
008A:  BCF    08.0
....................    lcd_rw_tris(); 
008B:  BCF    08.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
008C:  BCF    03.5
008D:  BCF    08.0
008E:  BSF    03.5
008F:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00BE:  MOVF   78,W
00BF:  MOVWF  34
00C0:  BTFSS  34.7
00C1:  GOTO   0C4
00C2:  BSF    03.5
00C3:  GOTO   090
....................    lcd_output_rs(address); 
00C4:  MOVF   32,F
00C5:  BTFSS  03.2
00C6:  GOTO   0C9
00C7:  BCF    08.0
00C8:  GOTO   0CA
00C9:  BSF    08.0
00CA:  BSF    03.5
00CB:  BCF    08.0
....................    delay_cycles(1); 
00CC:  NOP
....................    lcd_output_rw(0); 
00CD:  BCF    03.5
00CE:  BCF    08.1
00CF:  BSF    03.5
00D0:  BCF    08.1
....................    delay_cycles(1); 
00D1:  NOP
....................    lcd_output_enable(0); 
00D2:  BCF    03.5
00D3:  BCF    08.2
00D4:  BSF    03.5
00D5:  BCF    08.2
....................    lcd_send_nibble(n >> 4); 
00D6:  BCF    03.5
00D7:  SWAPF  33,W
00D8:  MOVWF  34
00D9:  MOVLW  0F
00DA:  ANDWF  34,F
00DB:  MOVF   34,W
00DC:  MOVWF  35
00DD:  CALL   02C
....................    lcd_send_nibble(n & 0xf); 
00DE:  MOVF   33,W
00DF:  ANDLW  0F
00E0:  MOVWF  34
00E1:  MOVWF  35
00E2:  CALL   02C
00E3:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00E4:  BSF    03.5
00E5:  BCF    08.3
....................    output_drive(LCD_DATA5); 
00E6:  BCF    08.4
....................    output_drive(LCD_DATA6); 
00E7:  BCF    08.5
....................    output_drive(LCD_DATA7); 
00E8:  BCF    08.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00E9:  BCF    08.2
....................    lcd_rs_tris(); 
00EA:  BCF    08.0
....................    lcd_rw_tris(); 
00EB:  BCF    08.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00EC:  BCF    03.5
00ED:  BCF    08.0
00EE:  BSF    03.5
00EF:  BCF    08.0
....................    lcd_output_rw(0); 
00F0:  BCF    03.5
00F1:  BCF    08.1
00F2:  BSF    03.5
00F3:  BCF    08.1
....................    lcd_output_enable(0); 
00F4:  BCF    03.5
00F5:  BCF    08.2
00F6:  BSF    03.5
00F7:  BCF    08.2
....................      
....................    delay_ms(15); 
00F8:  MOVLW  0F
00F9:  BCF    03.5
00FA:  MOVWF  2E
00FB:  CALL   017
....................    for(i=1;i<=3;++i) 
00FC:  MOVLW  01
00FD:  MOVWF  27
00FE:  MOVF   27,W
00FF:  SUBLW  03
0100:  BTFSS  03.0
0101:  GOTO   10A
....................    { 
....................        lcd_send_nibble(3); 
0102:  MOVLW  03
0103:  MOVWF  35
0104:  CALL   02C
....................        delay_ms(5); 
0105:  MOVLW  05
0106:  MOVWF  2E
0107:  CALL   017
0108:  INCF   27,F
0109:  GOTO   0FE
....................    } 
....................     
....................    lcd_send_nibble(2); 
010A:  MOVLW  02
010B:  MOVWF  35
010C:  CALL   02C
....................    delay_ms(5); 
010D:  MOVLW  05
010E:  MOVWF  2E
010F:  CALL   017
....................    for(i=0;i<=3;++i) 
0110:  CLRF   27
0111:  MOVF   27,W
0112:  SUBLW  03
0113:  BTFSS  03.0
0114:  GOTO   11E
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0115:  MOVF   27,W
0116:  CALL   004
0117:  MOVWF  28
0118:  CLRF   32
0119:  MOVF   28,W
011A:  MOVWF  33
011B:  CALL   088
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
011C:  INCF   27,F
011D:  GOTO   111
011E:  BCF    0A.3
011F:  BCF    0A.4
0120:  GOTO   350 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
024A:  DECFSZ 2F,W
024B:  GOTO   24D
024C:  GOTO   250
....................       address=LCD_LINE_TWO; 
024D:  MOVLW  40
024E:  MOVWF  30
024F:  GOTO   251
....................    else 
....................       address=0; 
0250:  CLRF   30
....................       
....................    address+=x-1; 
0251:  MOVLW  01
0252:  SUBWF  2E,W
0253:  ADDWF  30,F
....................    lcd_send_byte(0,0x80|address); 
0254:  MOVF   30,W
0255:  IORLW  80
0256:  MOVWF  31
0257:  CLRF   32
0258:  MOVF   31,W
0259:  MOVWF  33
025A:  CALL   088
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
025B:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
025C:  MOVF   2D,W
025D:  XORLW  07
025E:  BTFSC  03.2
025F:  GOTO   26A
0260:  XORLW  0B
0261:  BTFSC  03.2
0262:  GOTO   26F
0263:  XORLW  06
0264:  BTFSC  03.2
0265:  GOTO   277
0266:  XORLW  02
0267:  BTFSC  03.2
0268:  GOTO   27D
0269:  GOTO   282
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
026A:  MOVLW  01
026B:  MOVWF  2E
026C:  MOVWF  2F
026D:  CALL   24A
026E:  GOTO   287
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
026F:  CLRF   32
0270:  MOVLW  01
0271:  MOVWF  33
0272:  CALL   088
....................                      delay_ms(2); 
0273:  MOVLW  02
0274:  MOVWF  2E
0275:  CALL   017
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0276:  GOTO   287
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0277:  MOVLW  01
0278:  MOVWF  2E
0279:  MOVLW  02
027A:  MOVWF  2F
027B:  CALL   24A
027C:  GOTO   287
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
027D:  CLRF   32
027E:  MOVLW  10
027F:  MOVWF  33
0280:  CALL   088
0281:  GOTO   287
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0282:  MOVLW  01
0283:  MOVWF  32
0284:  MOVF   2D,W
0285:  MOVWF  33
0286:  CALL   088
....................      #endif 
....................    } 
0287:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <DS1302.c>  // DS1302.c dosyasý programa ekleniyor 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////  get_bcd(data)                              Convert data to BCD  //// 
.................... ////                                                                  //// 
.................... ////  rm_bcd(data)                               Convert data to int  //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef RTC_SCLK 
....................  
.................... #define RTC_SCLK PIN_B1 
.................... #define RTC_IO   PIN_B3 
.................... #define RTC_RST  PIN_B2 
....................  
.................... #endif 
....................  
.................... void write_ds1302_byte(BYTE cmd) { 
....................    BYTE i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
0121:  CLRF   31
0122:  MOVF   31,W
0123:  SUBLW  07
0124:  BTFSS  03.0
0125:  GOTO   138
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
0126:  BCF    03.0
0127:  RRF    30,F
0128:  BTFSC  03.0
0129:  GOTO   12C
012A:  BCF    06.3
012B:  GOTO   12D
012C:  BSF    06.3
012D:  BSF    03.5
012E:  BCF    06.3
....................       output_high(RTC_SCLK); 
012F:  BCF    06.1
0130:  BCF    03.5
0131:  BSF    06.1
....................       output_low(RTC_SCLK); 
0132:  BSF    03.5
0133:  BCF    06.1
0134:  BCF    03.5
0135:  BCF    06.1
0136:  INCF   31,F
0137:  GOTO   122
....................    } 
0138:  RETURN
.................... } 
....................  
.................... void write_ds1302(BYTE cmd, BYTE data) { 
....................  
....................    output_high(RTC_RST); 
0139:  BSF    03.5
013A:  BCF    06.2
013B:  BCF    03.5
013C:  BSF    06.2
....................    write_ds1302_byte(cmd); 
013D:  MOVF   2E,W
013E:  MOVWF  30
013F:  CALL   121
....................    write_ds1302_byte(data); 
0140:  MOVF   2F,W
0141:  MOVWF  30
0142:  CALL   121
....................    output_low(RTC_RST); 
0143:  BSF    03.5
0144:  BCF    06.2
0145:  BCF    03.5
0146:  BCF    06.2
0147:  RETURN
.................... } 
....................  
.................... BYTE read_ds1302(BYTE cmd) { 
....................    BYTE i,data; 
....................  
....................    output_high(RTC_RST); 
0148:  BSF    03.5
0149:  BCF    06.2
014A:  BCF    03.5
014B:  BSF    06.2
....................    write_ds1302_byte(cmd); 
014C:  MOVF   2B,W
014D:  MOVWF  30
014E:  CALL   121
....................     
....................    input(RTC_IO); 
014F:  BSF    03.5
0150:  BSF    06.3
....................    delay_us(1); 
0151:  NOP
....................           
....................    for(i=0;i<=7;++i) { 
0152:  BCF    03.5
0153:  CLRF   2C
0154:  MOVF   2C,W
0155:  SUBLW  07
0156:  BTFSS  03.0
0157:  GOTO   16D
....................       shift_right(&data,1,input(RTC_IO)); 
0158:  BSF    03.5
0159:  BSF    06.3
015A:  BCF    03.5
015B:  BTFSC  06.3
015C:  GOTO   15F
015D:  BCF    03.0
015E:  GOTO   160
015F:  BSF    03.0
0160:  RRF    2D,F
....................       output_high(RTC_SCLK); 
0161:  BSF    03.5
0162:  BCF    06.1
0163:  BCF    03.5
0164:  BSF    06.1
....................       delay_us(2); 
0165:  GOTO   166
....................       output_low(RTC_SCLK); 
0166:  BSF    03.5
0167:  BCF    06.1
0168:  BCF    03.5
0169:  BCF    06.1
....................       delay_us(2); 
016A:  GOTO   16B
016B:  INCF   2C,F
016C:  GOTO   154
....................    } 
....................    output_low(RTC_RST); 
016D:  BSF    03.5
016E:  BCF    06.2
016F:  BCF    03.5
0170:  BCF    06.2
....................  
....................    return(data); 
0171:  MOVF   2D,W
0172:  MOVWF  78
0173:  RETURN
.................... } 
....................  
.................... void rtc_init() { 
....................    BYTE x; 
....................    output_low(RTC_RST); 
0174:  BSF    03.5
0175:  BCF    06.2
0176:  BCF    03.5
0177:  BCF    06.2
....................    delay_us(2); 
0178:  GOTO   179
....................    output_low(RTC_SCLK); 
0179:  BSF    03.5
017A:  BCF    06.1
017B:  BCF    03.5
017C:  BCF    06.1
....................    write_ds1302(0x8e,0); 
017D:  MOVLW  8E
017E:  MOVWF  2E
017F:  CLRF   2F
0180:  CALL   139
....................    write_ds1302(0x90,0xa4); 
0181:  MOVLW  90
0182:  MOVWF  2E
0183:  MOVLW  A4
0184:  MOVWF  2F
0185:  CALL   139
....................    x=read_ds1302(0x81); 
0186:  MOVLW  81
0187:  MOVWF  2B
0188:  CALL   148
0189:  MOVF   78,W
018A:  MOVWF  27
....................    if((x & 0x80)!=0) 
018B:  MOVF   27,W
018C:  ANDLW  80
018D:  BTFSC  03.2
018E:  GOTO   193
....................      write_ds1302(0x80,0); 
018F:  MOVLW  80
0190:  MOVWF  2E
0191:  CLRF   2F
0192:  CALL   139
0193:  BCF    0A.3
0194:  BCF    0A.4
0195:  GOTO   351 (RETURN)
.................... } 
....................  
.................... byte get_bcd(BYTE data) 
.................... { 
....................    byte nibh; 
....................    byte nibl; 
....................  
....................    nibh=data/10; 
*
01D0:  MOVF   2D,W
01D1:  MOVWF  30
01D2:  MOVLW  0A
01D3:  MOVWF  31
01D4:  CALL   196
01D5:  MOVF   78,W
01D6:  MOVWF  2E
....................    nibl=data-(nibh*10); 
01D7:  MOVF   2E,W
01D8:  MOVWF  30
01D9:  MOVLW  0A
01DA:  MOVWF  31
01DB:  CALL   1AB
01DC:  MOVF   78,W
01DD:  SUBWF  2D,W
01DE:  MOVWF  2F
....................  
....................    return((nibh<<4)|nibl); 
01DF:  SWAPF  2E,W
01E0:  MOVWF  77
01E1:  MOVLW  F0
01E2:  ANDWF  77,F
01E3:  MOVF   77,W
01E4:  IORWF  2F,W
01E5:  MOVWF  78
01E6:  RETURN
.................... } 
....................  
.................... byte rm_bcd(BYTE data) 
.................... { 
....................    byte i; 
....................  
....................    i=data; 
*
022F:  MOVF   2C,W
0230:  MOVWF  2D
....................    data=(i>>4)*10; 
0231:  SWAPF  2D,W
0232:  MOVWF  77
0233:  MOVLW  0F
0234:  ANDWF  77,F
0235:  MOVF   77,W
0236:  MOVWF  2F
0237:  MOVWF  30
0238:  MOVLW  0A
0239:  MOVWF  31
023A:  CALL   1AB
023B:  MOVF   78,W
023C:  MOVWF  2C
....................    data=data+(i<<4>>4); 
023D:  SWAPF  2D,W
023E:  MOVWF  77
023F:  MOVLW  F0
0240:  ANDWF  77,F
0241:  MOVF   77,W
0242:  SWAPF  77,F
0243:  MOVLW  0F
0244:  ANDWF  77,F
0245:  MOVF   77,W
0246:  ADDWF  2C,F
....................  
....................    return data; 
0247:  MOVF   2C,W
0248:  MOVWF  78
0249:  RETURN
.................... } 
....................  
.................... void rtc_set_datetime(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min) { 
....................  
....................    write_ds1302(0x86,get_bcd(day)); 
*
01E7:  MOVF   27,W
01E8:  MOVWF  2D
01E9:  CALL   1D0
01EA:  MOVF   78,W
01EB:  MOVWF  2D
01EC:  MOVLW  86
01ED:  MOVWF  2E
01EE:  MOVF   78,W
01EF:  MOVWF  2F
01F0:  CALL   139
....................    write_ds1302(0x88,get_bcd(mth)); 
01F1:  MOVF   28,W
01F2:  MOVWF  2D
01F3:  CALL   1D0
01F4:  MOVF   78,W
01F5:  MOVWF  2D
01F6:  MOVLW  88
01F7:  MOVWF  2E
01F8:  MOVF   78,W
01F9:  MOVWF  2F
01FA:  CALL   139
....................    write_ds1302(0x8c,get_bcd(year)); 
01FB:  MOVF   29,W
01FC:  MOVWF  2D
01FD:  CALL   1D0
01FE:  MOVF   78,W
01FF:  MOVWF  2D
0200:  MOVLW  8C
0201:  MOVWF  2E
0202:  MOVF   78,W
0203:  MOVWF  2F
0204:  CALL   139
....................    write_ds1302(0x8a,get_bcd(dow)); 
0205:  MOVF   2A,W
0206:  MOVWF  2D
0207:  CALL   1D0
0208:  MOVF   78,W
0209:  MOVWF  2D
020A:  MOVLW  8A
020B:  MOVWF  2E
020C:  MOVF   78,W
020D:  MOVWF  2F
020E:  CALL   139
....................    write_ds1302(0x84,get_bcd(hr)); 
020F:  MOVF   2B,W
0210:  MOVWF  2D
0211:  CALL   1D0
0212:  MOVF   78,W
0213:  MOVWF  2D
0214:  MOVLW  84
0215:  MOVWF  2E
0216:  MOVF   78,W
0217:  MOVWF  2F
0218:  CALL   139
....................    write_ds1302(0x82,get_bcd(min)); 
0219:  MOVF   2C,W
021A:  MOVWF  2D
021B:  CALL   1D0
021C:  MOVF   78,W
021D:  MOVWF  2D
021E:  MOVLW  82
021F:  MOVWF  2E
0220:  MOVF   78,W
0221:  MOVWF  2F
0222:  CALL   139
....................    write_ds1302(0x80,get_bcd(0)); 
0223:  CLRF   2D
0224:  CALL   1D0
0225:  MOVF   78,W
0226:  MOVWF  2D
0227:  MOVLW  80
0228:  MOVWF  2E
0229:  MOVF   78,W
022A:  MOVWF  2F
022B:  CALL   139
022C:  BCF    0A.3
022D:  BCF    0A.4
022E:  GOTO   35D (RETURN)
.................... } 
....................  
.................... void rtc_get_date(BYTE& day, BYTE& mth, BYTE& year, BYTE& dow) { 
....................    day = rm_bcd(read_ds1302(0x87)); 
*
0378:  MOVLW  87
0379:  MOVWF  2B
037A:  CALL   148
037B:  MOVF   78,W
037C:  MOVWF  27
037D:  MOVWF  2C
037E:  CALL   22F
037F:  MOVF   78,W
0380:  MOVWF  23
....................    mth = rm_bcd(read_ds1302(0x89)); 
0381:  MOVLW  89
0382:  MOVWF  2B
0383:  CALL   148
0384:  MOVF   78,W
0385:  MOVWF  27
0386:  MOVWF  2C
0387:  CALL   22F
0388:  MOVF   78,W
0389:  MOVWF  24
....................    year = rm_bcd(read_ds1302(0x8d)); 
038A:  MOVLW  8D
038B:  MOVWF  2B
038C:  CALL   148
038D:  MOVF   78,W
038E:  MOVWF  27
038F:  MOVWF  2C
0390:  CALL   22F
0391:  MOVF   78,W
0392:  MOVWF  25
....................    dow = rm_bcd(read_ds1302(0x8b)); 
0393:  MOVLW  8B
0394:  MOVWF  2B
0395:  CALL   148
0396:  MOVF   78,W
0397:  MOVWF  27
0398:  MOVWF  2C
0399:  CALL   22F
039A:  MOVF   78,W
039B:  MOVWF  26
.................... } 
....................  
.................... void rtc_get_time(BYTE& hr, BYTE& min, BYTE& sec) { 
....................    hr = rm_bcd(read_ds1302(0x85)); 
*
035D:  MOVLW  85
035E:  MOVWF  2B
035F:  CALL   148
0360:  MOVF   78,W
0361:  MOVWF  27
0362:  MOVWF  2C
0363:  CALL   22F
0364:  MOVF   78,W
0365:  MOVWF  22
....................    min = rm_bcd(read_ds1302(0x83)); 
0366:  MOVLW  83
0367:  MOVWF  2B
0368:  CALL   148
0369:  MOVF   78,W
036A:  MOVWF  27
036B:  MOVWF  2C
036C:  CALL   22F
036D:  MOVF   78,W
036E:  MOVWF  21
....................    sec = rm_bcd(read_ds1302(0x81)); 
036F:  MOVLW  81
0370:  MOVWF  2B
0371:  CALL   148
0372:  MOVF   78,W
0373:  MOVWF  27
0374:  MOVWF  2C
0375:  CALL   22F
0376:  MOVF   78,W
0377:  MOVWF  20
.................... } 
....................  
.................... void rtc_write_nvr(BYTE address, BYTE data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... BYTE rtc_read_nvr(BYTE address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
....................  
.................... byte saniye,dakika,saat,gun,ay,yil,haftanin_gunu; // byte türünde deðiþkenler tanýmlanýyor 
....................  
.................... //******************* ANA PROGRAM FONKSÝYONU ******************* 
.................... void main () 
*
0335:  BSF    03.5
0336:  BSF    1F.0
0337:  BSF    1F.1
0338:  BSF    1F.2
0339:  BCF    1F.3
033A:  BCF    03.7
033B:  MOVLW  1F
033C:  ANDWF  03,F
.................... { 
....................    setup_psp(PSP_DISABLED);        // PSP birimi devre dýþý 
033D:  BCF    09.4
....................    setup_timer_1(T1_DISABLED);     // T1 zamanlayýcýsý devre dýþý 
033E:  BCF    03.5
033F:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); // T2 zamanlayýcýsý devre dýþý 
0340:  MOVLW  00
0341:  MOVWF  78
0342:  MOVWF  12
0343:  MOVLW  00
0344:  BSF    03.5
0345:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS);    // ANALOG giriþ yok 
0346:  BSF    1F.0
0347:  BSF    1F.1
0348:  BSF    1F.2
0349:  BCF    1F.3
....................    setup_adc(ADC_OFF);             // ADC birimi devre dýþý 
034A:  BCF    03.5
034B:  BCF    1F.0
....................    setup_CCP1(CCP_OFF);            // CCP1 birimi devre dýþý 
034C:  MOVLW  F0
034D:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF);            // CCP2 birimi devre dýþý 
034E:  ANDWF  1D,F
....................  
....................    lcd_init();  // LCD baþlangýç ayarlarý yapýlýyor 
034F:  GOTO   0E4
....................    rtc_init();  // DS1302 baþlangýç ayarlarý yapýlýyor 
0350:  GOTO   174
....................  
....................    rtc_set_datetime(20,07,07,6,22,52); // Tarih ve Saat ayarlarý yapýlýyor 
0351:  MOVLW  14
0352:  MOVWF  27
0353:  MOVLW  07
0354:  MOVWF  28
0355:  MOVWF  29
0356:  MOVLW  06
0357:  MOVWF  2A
0358:  MOVLW  16
0359:  MOVWF  2B
035A:  MOVLW  34
035B:  MOVWF  2C
035C:  GOTO   1E7
....................  
....................    while(1) 
....................    { 
....................       rtc_get_time(saat,dakika,saniye);       // DS1302'den saat,dakika,saniye bilgileri alýnýyor 
....................       rtc_get_date(gun,ay,yil,haftanin_gunu); // DS1302'den gün,ay,yil ve günün isim bilgisi alýnýyor 
....................       printf(lcd_putc,"\fT:%02d/%02d/20%02d ",(int)gun,(int)ay,(int)yil); //LCD'ye gün,ay,yýl bilgileri yazdýrýlýyor 
*
039C:  MOVLW  0C
039D:  MOVWF  2D
039E:  CALL   25C
039F:  MOVLW  54
03A0:  MOVWF  2D
03A1:  CALL   25C
03A2:  MOVLW  3A
03A3:  MOVWF  2D
03A4:  CALL   25C
03A5:  MOVF   23,W
03A6:  MOVWF  27
03A7:  MOVLW  01
03A8:  MOVWF  28
03A9:  CALL   288
03AA:  MOVLW  2F
03AB:  MOVWF  2D
03AC:  CALL   25C
03AD:  MOVF   24,W
03AE:  MOVWF  27
03AF:  MOVLW  01
03B0:  MOVWF  28
03B1:  CALL   288
03B2:  MOVLW  2F
03B3:  MOVWF  2D
03B4:  CALL   25C
03B5:  MOVLW  32
03B6:  MOVWF  2D
03B7:  CALL   25C
03B8:  MOVLW  30
03B9:  MOVWF  2D
03BA:  CALL   25C
03BB:  MOVF   25,W
03BC:  MOVWF  27
03BD:  MOVLW  01
03BE:  MOVWF  28
03BF:  CALL   288
03C0:  MOVLW  20
03C1:  MOVWF  2D
03C2:  CALL   25C
....................  
....................       switch(haftanin_gunu)  // DS1302'den sayýsal olarak alýnan haftanýn günü bilgisine 
03C3:  MOVLW  01
03C4:  SUBWF  26,W
03C5:  ADDLW  F9
03C6:  BTFSC  03.0
03C7:  GOTO   40F
03C8:  ADDLW  07
03C9:  GOTO   437
....................       {                      // metin olarak karþýlýk atanýyor 
....................          case 1: printf(lcd_putc,"PAZ"); break; // Eðer "1" ise LCD'ye PAZ yaz 
03CA:  MOVLW  50
03CB:  MOVWF  2D
03CC:  CALL   25C
03CD:  MOVLW  41
03CE:  MOVWF  2D
03CF:  CALL   25C
03D0:  MOVLW  5A
03D1:  MOVWF  2D
03D2:  CALL   25C
03D3:  GOTO   40F
....................          case 2: printf(lcd_putc,"PZT"); break; // Eðer "2" ise LCD'ye PZT yaz 
03D4:  MOVLW  50
03D5:  MOVWF  2D
03D6:  CALL   25C
03D7:  MOVLW  5A
03D8:  MOVWF  2D
03D9:  CALL   25C
03DA:  MOVLW  54
03DB:  MOVWF  2D
03DC:  CALL   25C
03DD:  GOTO   40F
....................          case 3: printf(lcd_putc,"SAL"); break; // Eðer "3" ise LCD'ye SAL yaz 
03DE:  MOVLW  53
03DF:  MOVWF  2D
03E0:  CALL   25C
03E1:  MOVLW  41
03E2:  MOVWF  2D
03E3:  CALL   25C
03E4:  MOVLW  4C
03E5:  MOVWF  2D
03E6:  CALL   25C
03E7:  GOTO   40F
....................          case 4: printf(lcd_putc,"CRS"); break; // Eðer "4" ise LCD'ye CRS yaz 
03E8:  MOVLW  43
03E9:  MOVWF  2D
03EA:  CALL   25C
03EB:  MOVLW  52
03EC:  MOVWF  2D
03ED:  CALL   25C
03EE:  MOVLW  53
03EF:  MOVWF  2D
03F0:  CALL   25C
03F1:  GOTO   40F
....................          case 5: printf(lcd_putc,"PER"); break; // Eðer "5" ise LCD'ye PER yaz 
03F2:  MOVLW  50
03F3:  MOVWF  2D
03F4:  CALL   25C
03F5:  MOVLW  45
03F6:  MOVWF  2D
03F7:  CALL   25C
03F8:  MOVLW  52
03F9:  MOVWF  2D
03FA:  CALL   25C
03FB:  GOTO   40F
....................          case 6: printf(lcd_putc,"CUM"); break; // Eðer "6" ise LCD'ye CUM yaz 
03FC:  MOVLW  43
03FD:  MOVWF  2D
03FE:  CALL   25C
03FF:  MOVLW  55
0400:  MOVWF  2D
0401:  CALL   25C
0402:  MOVLW  4D
0403:  MOVWF  2D
0404:  CALL   25C
0405:  GOTO   40F
....................          case 7: printf(lcd_putc,"CTS"); break; // Eðer "7" ise LCD'ye CTS yaz 
0406:  MOVLW  43
0407:  MOVWF  2D
0408:  CALL   25C
0409:  MOVLW  54
040A:  MOVWF  2D
040B:  CALL   25C
040C:  MOVLW  53
040D:  MOVWF  2D
040E:  CALL   25C
....................       } 
....................       printf(lcd_putc,"\nSaat:%02d:%02d:%02d",saat,dakika,saniye); // LCD'ye saat,dakika ve saniye deðerlerini yaz 
040F:  MOVLW  0C
0410:  BSF    03.6
0411:  MOVWF  0D
0412:  MOVLW  00
0413:  MOVWF  0F
0414:  BCF    03.0
0415:  MOVLW  06
0416:  BCF    03.6
0417:  MOVWF  27
0418:  GOTO   2DF
0419:  MOVF   22,W
041A:  MOVWF  27
041B:  MOVLW  01
041C:  MOVWF  28
041D:  CALL   288
041E:  MOVLW  3A
041F:  MOVWF  2D
0420:  CALL   25C
0421:  MOVF   21,W
0422:  MOVWF  27
0423:  MOVLW  01
0424:  MOVWF  28
0425:  CALL   288
0426:  MOVLW  3A
0427:  MOVWF  2D
0428:  CALL   25C
0429:  MOVF   20,W
042A:  MOVWF  27
042B:  MOVLW  01
042C:  MOVWF  28
042D:  CALL   288
....................       delay_ms(1000); // 1 sn gecikme veriliyor 
042E:  MOVLW  04
042F:  MOVWF  27
0430:  MOVLW  FA
0431:  MOVWF  2E
0432:  CALL   017
0433:  DECFSZ 27,F
0434:  GOTO   430
0435:  GOTO   35D
....................    } 
.................... } 
....................  
0436:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
